'use client'

import { useEffect, useRef, useState } from 'react'
import { useRouter } from 'next/navigation'

export default function LeadForm({ formId = 'lead-form' }) {
  const [loading, setLoading] = useState(false)
  const [tfToken, setTfToken] = useState('')
  const [zipCodeError, setZipCodeError] = useState('')
  const [isZipCodeValid, setIsZipCodeValid] = useState(true)
  const tfHiddenRef = useRef(null)
  const hasSubmitted = useRef(false)
  const formRef = useRef(null)
  const router = useRouter()

  // Lista de zipcodes autorizados
  const authorizedZipCodes = [
    '36439', '36482', '36505', '36518', '36521', '36523', '36525', '36526', '36527', '36528', '36529', '36530', '36532', '36535', '36541', '36542', '36549', '36551', '36553', '36555', '36561', '36567', '36571', '36572', '36574', '36575', '36576', '36577', '36578', '36579', '36580', '36581', '36582', '36585', '36587', '36602', '36604', '36608', '36609', '36619', '36693', '36695',
    '85001', '85002', '85003', '85004', '85005', '85006', '85007', '85008', '85009', '85010', '85011', '85012', '85013', '85014', '85015', '85016', '85017', '85018', '85019', '85020', '85021', '85022', '85023', '85024', '85026', '85027', '85028', '85029', '85030', '85031', '85032', '85033', '85034', '85035', '85036', '85037', '85038', '85039', '85040', '85041', '85042', '85043', '85044', '85045', '85046', '85048', '85050', '85051', '85053', '85054', '85060', '85061', '85062', '85063', '85064', '85065', '85066', '85067', '85068', '85069', '85070', '85071', '85072', '85073', '85074', '85075', '85076', '85078', '85079', '85080', '85082', '85083', '85085', '85086', '85087', '85117', '85118', '85119', '85120', '85121', '85122', '85123', '85127', '85128', '85130', '85131', '85132', '85135', '85137', '85138', '85139', '85140', '85142', '85143', '85147', '85172', '85173', '85178', '85190', '85191', '85193', '85194',
    '85201', '85202', '85203', '85204', '85205', '85206', '85207', '85208', '85209', '85210', '85211', '85212', '85213', '85214', '85215', '85216', '85224', '85225', '85226', '85233', '85234', '85236', '85242', '85244', '85246', '85248', '85249', '85250', '85251', '85252', '85253', '85254', '85255', '85256', '85257', '85258', '85259', '85260', '85261', '85262', '85263', '85264', '85266', '85267', '85268', '85269', '85271', '85274', '85275', '85277', '85280', '85281', '85282', '85283', '85284', '85285', '85286', '85287', '85295', '85296', '85297', '85298', '85299',
    '85301', '85302', '85303', '85304', '85305', '85306', '85307', '85308', '85309', '85310', '85311', '85312', '85318', '85320', '85322', '85323', '85324', '85326', '85327', '85329', '85331', '85332', '85335', '85337', '85338', '85339', '85340', '85342', '85343', '85345', '85351', '85353', '85354', '85355', '85358', '85361', '85362', '85363', '85372', '85373', '85374', '85375', '85376', '85377', '85378', '85379', '85380', '85381', '85382', '85383', '85385', '85387', '85388', '85390', '85392', '85395', '85396',
    '85501', '85502', '85532', '85539', '85541', '85544', '85545', '85547', '85553', '85554', '86303', '86322', '86327', '86329', '86332', '86333', '86343',
    '94503', '94509', '94510', '94513', '94517', '94518', '94519', '94520', '94521', '94522', '94523', '94524', '94527', '94529', '94530', '94531', '94533', '94534', '94536', '94537', '94538', '94539', '94546', '94547', '94549', '94552', '94553', '94555', '94558', '94559', '94560', '94561', '94564', '94565', '94577', '94578', '94579', '94580', '94581', '94585', '94586', '94589', '94590', '94591', '94592', '94595', '94596', '94597', '94598',
    '94801', '94802', '94803', '94804', '94805', '94806', '94807', '94808', '94820', '94850', '94926', '94927', '94928', '94945', '94947', '94948', '94949', '94952', '94953', '94954', '94955', '94975', '94998', '94999',
    '95401', '95402', '95403', '95404', '95405', '95406', '95407', '95409', '95687', '95688', '95696',
    '80001', '80002', '80003', '80004', '80005', '80006', '80007', '80010', '80011', '80012', '80013', '80014', '80015', '80016', '80017', '80018', '80019', '80020', '80021', '80022', '80023', '80024', '80025', '80026', '80027', '80030', '80031', '80033', '80034', '80035', '80036', '80037', '80038', '80040', '80041', '80042', '80044', '80045', '80046', '80047',
    '80101', '80102', '80103', '80104', '80105', '80106', '80107', '80108', '80109', '80110', '80111', '80112', '80113', '80116', '80117', '80118', '80120', '80121', '80122', '80123', '80124', '80125', '80126', '80127', '80128', '80129', '80130', '80131', '80132', '80133', '80134', '80135', '80136', '80137', '80138', '80150', '80151', '80155', '80160', '80161', '80162', '80163', '80165', '80166',
    '80201', '80202', '80203', '80204', '80205', '80206', '80207', '80208', '80209', '80210', '80211', '80212', '80214', '80215', '80216', '80217', '80218', '80219', '80220', '80221', '80222', '80223', '80224', '80225', '80226', '80227', '80228', '80229', '80230', '80231', '80232', '80233', '80234', '80235', '80236', '80237', '80238', '80239', '80241', '80243', '80246', '80247', '80248', '80249', '80250', '80256', '80257', '80259', '80260', '80261', '80263', '80264', '80265', '80266', '80271', '80273', '80274', '80281', '80290', '80291', '80293', '80294', '80299',
    '80301', '80302', '80303', '80304', '80305', '80306', '80307', '80308', '80309', '80310', '80314',
    '80401', '80402', '80403', '80419', '80425', '80433', '80437', '80439', '80453', '80454', '80455', '80457', '80465', '80466', '80470', '80471', '80481',
    '80501', '80502', '80503', '80516', '80533', '80540', '80544',
    '80601', '80602', '80614', '80640',
    '80809', '80817', '80819', '80829', '80830', '80831', '80835',
    '80901', '80903', '80904', '80905', '80906', '80907', '80908', '80909', '80910', '80912', '80915', '80916', '80917', '80918', '80919', '80920', '80922', '80923', '80925', '80927', '80928', '80929', '80930', '80932', '80933', '80934', '80935', '80936', '80937', '80938', '80939', '80941', '80942', '80946', '80947', '80949', '80950', '80951', '80960', '80962', '80970', '80977', '80995', '80997',
    // Connecticut
    '06001', '06002', '06006', '06010', '06011', '06013', '06016', '06018', '06019', '06021', '06023', '06024', '06025', '06026', '06027', '06028', '06029', '06030', '06031', '06032', '06033', '06034', '06035', '06037', '06039', '06040', '06041', '06042', '06043', '06045', '06050', '06051', '06052', '06053', '06057', '06058', '06059', '06060', '06061', '06062', '06063', '06064', '06065', '06066', '06067', '06068', '06069', '06070', '06071', '06073', '06074', '06075', '06076', '06077', '06078', '06079', '06080', '06081', '06082', '06083', '06084', '06085', '06088', '06089', '06090', '06091', '06092', '06093', '06094', '06095', '06096', '06098',
    '06101', '06102', '06103', '06104', '06105', '06106', '06107', '06108', '06109', '06110', '06111', '06112', '06114', '06115', '06117', '06118', '06119', '06120', '06126', '06127', '06128', '06129', '06131', '06133', '06137', '06138', '06140', '06142', '06144', '06146', '06150', '06152', '06154', '06156', '06161', '06176', '06183',
    '06226', '06231', '06232', '06233', '06234', '06235', '06237', '06238', '06239', '06241', '06242', '06243', '06245', '06247', '06248', '06249', '06250', '06251', '06254', '06255', '06256', '06258', '06259', '06260', '06262', '06263', '06264', '06265', '06266', '06267', '06268', '06269', '06277', '06278', '06279', '06280', '06281', '06282',
    '06320', '06330', '06331', '06332', '06333', '06334', '06335', '06336', '06339', '06340', '06349', '06351', '06353', '06354', '06355', '06357', '06359', '06360', '06365', '06370', '06371', '06372', '06374', '06375', '06376', '06377', '06378', '06379', '06380', '06382', '06383', '06384', '06385', '06388', '06389',
    '06401', '06403', '06404', '06405', '06408', '06409', '06410', '06411', '06412', '06413', '06414', '06415', '06416', '06417', '06418', '06419', '06420', '06422', '06423', '06424', '06426', '06437', '06438', '06440', '06441', '06442', '06443', '06444', '06447', '06450', '06451', '06455', '06457', '06460', '06461', '06467', '06468', '06469', '06470', '06471', '06472', '06473', '06475', '06477', '06478', '06479', '06480', '06481', '06482', '06483', '06484', '06487', '06488', '06489', '06491', '06492', '06493', '06494', '06495', '06497', '06498',
    '06501', '06503', '06505', '06507', '06509', '06510', '06511', '06512', '06513', '06514', '06515', '06516', '06517', '06518', '06519', '06521', '06524', '06525', '06531', '06532', '06533', '06534', '06535', '06536', '06537', '06538', '06540',
    '06602', '06604', '06605', '06606', '06607', '06608', '06610', '06611', '06612', '06614', '06615', '06650', '06673', '06699',
    '06701', '06702', '06703', '06704', '06705', '06706', '06708', '06710', '06712', '06716', '06720', '06721', '06722', '06723', '06724', '06725', '06726', '06749', '06750', '06751', '06752', '06753', '06754', '06755', '06756', '06757', '06758', '06759', '06762', '06763', '06770', '06776', '06777', '06778', '06779', '06781', '06782', '06783', '06784', '06785', '06786', '06787', '06790', '06791', '06792', '06793', '06794', '06795', '06796', '06798',
    '06801', '06804', '06807', '06810', '06811', '06812', '06813', '06820', '06824', '06825', '06828', '06829', '06830', '06831', '06840', '06850', '06851', '06853', '06854', '06855', '06857', '06860', '06870', '06876', '06877', '06878', '06880', '06883', '06889', '06890', '06896', '06897',
    '06901', '06902', '06903', '06905', '06906', '06907', '06910', '06911', '06913', '06926',
    // Washington DC
    '20001', '20002', '20003', '20004', '20005', '20006', '20007', '20008', '20009', '20010', '20011', '20012', '20013', '20015', '20016', '20017', '20018', '20019', '20020', '20022', '20024', '20026', '20027', '20029', '20030', '20032', '20033', '20035', '20036', '20037', '20038', '20039', '20040', '20041', '20042', '20043', '20044', '20045', '20047', '20049', '20050', '20052', '20053', '20055', '20056', '20057', '20058', '20059', '20060', '20061', '20062', '20063', '20064', '20065', '20066', '20067', '20068', '20069', '20070', '20071', '20073', '20074', '20075', '20076', '20077', '20078', '20080', '20081', '20082', '20090', '20091',
    '20201', '20202', '20203', '20204', '20206', '20207', '20208', '20210', '20211', '20212', '20213', '20214', '20215', '20216', '20217', '20218', '20219', '20220', '20221', '20222', '20223', '20224', '20226', '20227', '20228', '20229', '20230', '20232', '20233', '20235', '20237', '20238', '20239', '20240', '20241', '20242', '20244', '20245', '20250', '20251', '20254', '20260', '20261', '20262', '20265', '20266', '20268', '20270', '20277', '20289', '20299',
    '20301', '20303', '20306', '20310', '20314', '20317', '20318', '20319', '20330', '20340', '20350', '20355', '20370', '20372', '20375', '20380', '20389', '20390', '20392', '20393', '20394', '20395',
    '20401', '20402', '20403', '20404', '20405', '20406', '20407', '20408', '20410', '20411', '20412', '20413', '20414', '20415', '20416', '20417', '20418', '20419', '20420', '20421', '20422', '20423', '20424', '20425', '20426', '20427', '20428', '20429', '20431', '20433', '20434', '20435', '20436', '20437', '20439', '20440', '20441', '20442', '20444', '20447', '20451', '20453', '20456', '20460', '20463', '20468', '20469', '20470', '20472',
    '20500', '20501', '20502', '20503', '20504', '20505', '20506', '20507', '20508', '20509', '20510', '20511', '20515', '20520', '20521', '20522', '20523', '20524', '20525', '20526', '20527', '20528', '20529', '20530', '20531', '20533', '20534', '20535', '20536', '20537', '20538', '20539', '20540', '20541', '20542', '20543', '20544', '20546', '20547', '20548', '20549', '20551', '20552', '20553', '20554', '20555', '20557', '20559', '20560', '20565', '20566', '20570', '20571', '20572', '20573', '20575', '20576', '20577', '20578', '20579', '20580', '20581', '20585', '20586', '20590', '20591', '20593', '20594', '20597', '20599',
    // Florida
    '33413', '33414', '33426', '33435', '33436', '33437', '33444', '33445', '33446', '33472', '33473', '33483', '33484', '34953', '34983', '34984', '34985', '34986', '34990', '34994', '34996', '34997',
    // Georgia
    '31308', '31309', '31312', '31313', '31315', '31322', '31323', '31324', '31326', '31402', '31403', '31405', '31406', '31407', '31409', '31410', '31412', '31414', '31416', '31418', '31420', '31421',
    // Idaho
    '83201', '83202', '83203', '83204', '83209', '83210', '83211', '83212', '83213', '83214', '83215', '83217', '83218', '83221', '83227', '83228', '83232', '83234', '83244', '83245', '83246', '83250', '83252', '83262', '83263', '83271', '83274', '83276', '83277', '83278', '83281', '83285',
    '83311', '83314', '83316', '83318', '83322', '83323', '83327', '83330', '83332', '83336', '83337', '83340', '83346', '83347', '83350', '83354', '83355',
    '83401', '83402', '83404', '83406', '83420', '83421', '83422', '83423', '83424', '83425', '83427', '83428', '83431', '83434', '83435', '83436', '83440', '83442', '83443', '83444', '83445', '83446', '83448', '83449', '83450', '83451', '83452', '83454', '83455', '83460', '83464',
    '83602', '83604', '83605', '83606', '83607', '83610', '83611', '83612', '83615', '83616', '83617', '83619', '83622', '83623', '83624', '83626', '83627', '83628', '83629', '83630', '83631', '83632', '83633', '83634', '83635', '83636', '83637', '83639', '83641', '83642', '83643', '83644', '83645', '83646', '83647', '83648', '83650', '83651', '83652', '83653', '83655', '83656', '83657', '83660', '83661', '83666', '83669', '83670', '83672', '83676', '83680', '83686', '83687',
    '83701', '83702', '83703', '83704', '83705', '83706', '83707', '83708', '83709', '83711', '83712', '83713', '83714', '83715', '83716', '83717', '83719', '83720', '83722', '83724', '83725', '83726', '83728', '83729', '83732', '83735', '83756', '83799',
    '83801', '83803', '83810', '83814', '83815', '83816', '83833', '83835', '83842', '83854', '83858', '83869', '83876', '83877',
    // Illinois
    '62001', '62006', '62009', '62010', '62012', '62013', '62014', '62015', '62016', '62018', '62021', '62022', '62023', '62024', '62025', '62026', '62027', '62028', '62030', '62031', '62033', '62034', '62035', '62036', '62037', '62044', '62045', '62046', '62047', '62048', '62049', '62052', '62053', '62054', '62056', '62058', '62061', '62062', '62063', '62065', '62067', '62069', '62070', '62074', '62077', '62079', '62081', '62084', '62085', '62086', '62087', '62088', '62091', '62092', '62093', '62095', '62097', '62098',
    '62214', '62215', '62216', '62217', '62218', '62219', '62221', '62222', '62223', '62225', '62226', '62230', '62231', '62232', '62234', '62236', '62239', '62242', '62243', '62244', '62245', '62246', '62248', '62249', '62253', '62254', '62255', '62256', '62257', '62258', '62260', '62261', '62262', '62263', '62264', '62265', '62266', '62269', '62271', '62273', '62275', '62277', '62278', '62279', '62281', '62282', '62284', '62285', '62286', '62288', '62289', '62292', '62293', '62294', '62295', '62298',
    '62560', '62572', '62626', '62630', '62649', '62685', '62803', '62808', '62848', '62877',
    // Indiana
    '46365', '46506', '46507', '46514', '46530', '46537', '46540', '46544', '46545', '46552', '46553', '46554', '46555', '46561', '46565', '46567', '46571', '46573', '46617', '46637',
    '46701', '46703', '46705', '46737', '46746', '46747', '46761', '46767', '46784', '46794', '46795', '46796',
    '47001', '47003', '47006', '47010', '47011', '47012', '47016', '47017', '47018', '47019', '47020', '47021', '47022', '47023', '47024', '47025', '47030', '47031', '47032', '47033', '47034', '47035', '47036', '47037', '47038', '47039', '47040', '47041', '47042', '47043', '47060',
    '47223', '47224', '47250', '47353', '47355', '47358',
    // Kansas
    '66002', '66006', '66007', '66008', '66010', '66012', '66013', '66014', '66015', '66016', '66017', '66018', '66019', '66020', '66021', '66023', '66024', '66025', '66026', '66027', '66030', '66031', '66032', '66033', '66035', '66036', '66039', '66040', '66041', '66042', '66043', '66044', '66045', '66046', '66047', '66048', '66049', '66050', '66051', '66052', '66053', '66054', '66056', '66058', '66060', '66061', '66062', '66063', '66064', '66066', '66067', '66070', '66071', '66072', '66073', '66075', '66076', '66077', '66078', '66079', '66080', '66083', '66085', '66086', '66087', '66088', '66090', '66091', '66092', '66093', '66094', '66095', '66097',
    '66113',
    '66201', '66202', '66203', '66204', '66205', '66206', '66207', '66208', '66209', '66210', '66211', '66212', '66213', '66214', '66215', '66216', '66217', '66218', '66219', '66220', '66221', '66222', '66223', '66224', '66225', '66226', '66227', '66250', '66251', '66276', '66279', '66282', '66283', '66285', '66286',
    '66401', '66402', '66403', '66404', '66406', '66407', '66408', '66409', '66411', '66412', '66413', '66414', '66415', '66416', '66417', '66418', '66419', '66420', '66422', '66423', '66424', '66425', '66426', '66427', '66428', '66429', '66431', '66432', '66434', '66436', '66438', '66439', '66440', '66441', '66442', '66449', '66451',
    '66501', '66502', '66503', '66505', '66506', '66507', '66508', '66509', '66510', '66512', '66514', '66515', '66516', '66517', '66518', '66520', '66521', '66522', '66523', '66524', '66526', '66527', '66528', '66531', '66532', '66533', '66534', '66535', '66536', '66537', '66538', '66539', '66540', '66541', '66542', '66543', '66544', '66546', '66547', '66548', '66549', '66550', '66552', '66554',
    '66601', '66603', '66604', '66605', '66606', '66607', '66608', '66609', '66610', '66611', '66612', '66614', '66615', '66616', '66617', '66618', '66619', '66620', '66621', '66622', '66624', '66625', '66626', '66628', '66629', '66636', '66637', '66642', '66647', '66652', '66653', '66667', '66675', '66683', '66692', '66699',
    '66701', '66710', '66711', '66712', '66713', '66714', '66716', '66717', '66720', '66724', '66725', '66728', '66732', '66733', '66734', '66735', '66736', '66738', '66739', '66740', '66741', '66742', '66743', '66746', '66748', '66749', '66751', '66753', '66754', '66755', '66756', '66757', '66758', '66759', '66760', '66761', '66762', '66763', '66767', '66769', '66770', '66771', '66772', '66773', '66775', '66776', '66777', '66778', '66779', '66780', '66781', '66782', '66783',
    '66801', '66830', '66833', '66834', '66835', '66838', '66839', '66840', '66842', '66843', '66845', '66846', '66849', '66850', '66851', '66852', '66853', '66854', '66855', '66856', '66857', '66858', '66859', '66860', '66861', '66862', '66863', '66864', '66865', '66866', '66868', '66869', '66870', '66871', '66872', '66873',
    '66901', '66930', '66932', '66933', '66935', '66936', '66937', '66938', '66939', '66940', '66941', '66942', '66943', '66944', '66945', '66946', '66948', '66949', '66951', '66952', '66953', '66955', '66956', '66958', '66959', '66960', '66961', '66962', '66963', '66964', '66966', '66967', '66968', '66970',
    '67001', '67002', '67003', '67004', '67005', '67008', '67009', '67010', '67012', '67013', '67016', '67017', '67018', '67019', '67020', '67021', '67022', '67023', '67024', '67025', '67026', '67028', '67029', '67030', '67031', '67035', '67036', '67037', '67038', '67039', '67041', '67042', '67045', '67047', '67049', '67050', '67051', '67052', '67053', '67054', '67055', '67056', '67057', '67058', '67059', '67060', '67061', '67062', '67063', '67065', '67066', '67067', '67068', '67070', '67071', '67072', '67073', '67074',
    '67101', '67102', '67103', '67104', '67105', '67106', '67107', '67108', '67109', '67110', '67111', '67112', '67114', '67117', '67118', '67119', '67120', '67122', '67123', '67124', '67127', '67131', '67132', '67133', '67134', '67135', '67137', '67138', '67140', '67142', '67143', '67144', '67146', '67147', '67149', '67150', '67151', '67152', '67154', '67155', '67156', '67159',
    '67221',
    '67301', '67330', '67332', '67333', '67334', '67335', '67336', '67337', '67340', '67341', '67342', '67344', '67345', '67346', '67347', '67349', '67351', '67352', '67353', '67354', '67355', '67356', '67357', '67360', '67361', '67363', '67364',
    '67401', '67402', '67410', '67416', '67417', '67418', '67420', '67422', '67423', '67425', '67427', '67428', '67430', '67431', '67432', '67436', '67437', '67438', '67439', '67441', '67442', '67443', '67444', '67445', '67446', '67447', '67448', '67449', '67450', '67451', '67452', '67454', '67455', '67456', '67457', '67458', '67459', '67460', '67464', '67466', '67467', '67468', '67470', '67473', '67474', '67475', '67476', '67478', '67480', '67481', '67482', '67483', '67484', '67485', '67487', '67490', '67491', '67492',
    '67501', '67502', '67504', '67505', '67510', '67511', '67512', '67513', '67514', '67515', '67516', '67518', '67519', '67520', '67521', '67522', '67523', '67524', '67525', '67526', '67529', '67530', '67543', '67544', '67545', '67546', '67547', '67548', '67550', '67552', '67553', '67554', '67556', '67557', '67559', '67560', '67561', '67563', '67564', '67565', '67566', '67567', '67568', '67570', '67572', '67573', '67574', '67575', '67576', '67578', '67579', '67581', '67583', '67584', '67585',
    '67601', '67621', '67622', '67623', '67625', '67626', '67627', '67628', '67629', '67631', '67632', '67634', '67635', '67637', '67638', '67639', '67640', '67642', '67643', '67644', '67645', '67646', '67647', '67648', '67649', '67650', '67651', '67653', '67654', '67656', '67657', '67658', '67659', '67660', '67661', '67663', '67664', '67665', '67667', '67669', '67671', '67672', '67673', '67674', '67675',
    '67701', '67730', '67731', '67732', '67733', '67734', '67735', '67736', '67737', '67738', '67739', '67740', '67741', '67743', '67744', '67745', '67747', '67748', '67749', '67751', '67752', '67753', '67756', '67757', '67758', '67761', '67762', '67764',
    '67801', '67831', '67834', '67835', '67836', '67837', '67838', '67839', '67840', '67841', '67842', '67843', '67844', '67846', '67849', '67850', '67851', '67853', '67854', '67855', '67857', '67859', '67860', '67861', '67862', '67863', '67864', '67865', '67867', '67868', '67869', '67870', '67871', '67876', '67877', '67878', '67879', '67880', '67882',
    '67901', '67905', '67950', '67951', '67952', '67953', '67954',
    // Kentucky
    '40006', '40010', '40011', '40019', '40031', '40032', '40045', '40050', '40055', '40058', '40068', '40070', '40075',
    '40324', '40347', '40355', '40359', '40363', '40370', '40379',
    '40511', '40512', '40550', '40574', '40575', '40576', '40577', '40578', '40579', '40580', '40581', '40582', '40583',
    '41001', '41002', '41003', '41004', '41005', '41006', '41007', '41008', '41010', '41011', '41012', '41014', '41016', '41017', '41018', '41019', '41022', '41030', '41031', '41033', '41034', '41035', '41040', '41042', '41043', '41044', '41045', '41046', '41048', '41051', '41052', '41053', '41054', '41055', '41056', '41059', '41061', '41062', '41063', '41064', '41071', '41072', '41073', '41074', '41075', '41076', '41080', '41083', '41085', '41086', '41091', '41092', '41094', '41095', '41096', '41097', '41098', '41099',
    '42101', '42102', '42103', '42104', '42122', '42128', '42134', '42135', '42159', '42170', '42171',
    '42202', '42204', '42206', '42215', '42216', '42217', '42220', '42221', '42223', '42232', '42234', '42236', '42240', '42241', '42254', '42256', '42262', '42265', '42266', '42274', '42276', '42280', '42283', '42286',
    '42408', '42464',
    // Massachusetts
    '01001', '01002', '01003', '01007', '01008', '01009', '01010', '01011', '01012', '01013', '01020', '01022', '01026', '01027', '01028', '01029', '01030', '01032', '01033', '01034', '01035', '01036', '01038', '01039', '01040', '01050', '01053', '01054', '01056', '01057', '01060', '01062', '01063', '01066', '01069', '01070', '01071', '01072', '01073', '01075', '01077', '01079', '01080', '01081', '01082', '01084', '01085', '01086', '01088', '01089', '01093', '01095', '01096', '01097', '01098',
    '01101', '01102', '01103', '01104', '01105', '01106', '01107', '01108', '01109', '01111', '01115', '01118', '01119', '01128', '01129', '01138', '01139', '01144', '01151', '01152', '01199',
    '01201', '01202', '01220', '01222', '01223', '01224', '01225', '01226', '01229', '01230', '01235', '01236', '01237', '01238', '01240', '01242', '01243', '01244', '01245', '01247', '01253', '01254', '01255', '01256', '01257', '01258', '01259', '01260', '01262', '01264', '01266', '01267', '01270',
    '01301', '01330', '01337', '01338', '01339', '01340', '01341', '01342', '01343', '01344', '01346', '01347', '01349', '01350', '01351', '01354', '01355', '01360', '01364', '01367', '01370', '01373', '01375', '01376', '01378', '01379',
    '01420', '01431', '01432', '01434', '01450', '01453', '01460', '01463', '01464', '01469', '01470', '01471', '01472', '01474',
    '01520', '01521', '01529', '01532',
    '01602', '01605',
    '01701', '01702', '01703', '01704', '01705', '01718', '01719', '01720', '01721', '01730', '01731', '01741', '01742', '01746', '01748', '01749', '01752', '01754', '01756', '01760', '01770', '01773', '01775', '01776', '01778', '01784',
    '01801', '01803', '01805', '01810', '01812', '01813', '01815', '01821', '01822', '01824', '01826', '01827', '01830', '01831', '01832', '01833', '01834', '01835', '01840', '01841', '01842', '01843', '01844', '01845', '01850', '01851', '01852', '01853', '01854', '01860', '01862', '01863', '01864', '01865', '01866', '01867', '01876', '01879', '01880', '01885', '01886', '01887', '01888', '01889', '01890', '01899',
    '01901', '01902', '01903', '01904', '01905', '01906', '01907', '01908', '01910', '01913', '01915', '01921', '01922', '01923', '01929', '01930', '01931', '01936', '01937', '01938', '01940', '01944', '01945', '01949', '01950', '01951', '01952', '01960', '01961', '01965', '01966', '01969', '01970', '01971', '01982', '01983', '01984', '01985',
    '02018', '02019', '02020', '02021', '02025', '02026', '02027', '02030', '02032', '02035', '02038', '02040', '02041', '02043', '02044', '02045', '02047', '02048', '02050', '02051', '02052', '02053', '02054', '02055', '02056', '02059', '02060', '02061', '02062', '02065', '02066', '02067', '02070', '02071', '02072', '02081', '02090', '02093',
    '02108', '02109', '02110', '02111', '02112', '02113', '02114', '02115', '02116', '02117', '02118', '02119', '02120', '02121', '02122', '02123', '02124', '02125', '02126', '02127', '02128', '02129', '02130', '02131', '02132', '02133', '02134', '02135', '02136', '02137', '02138', '02139', '02140', '02141', '02142', '02143', '02144', '02145', '02148', '02149', '02150', '02151', '02152', '02153', '02155', '02156', '02163', '02169', '02170', '02171', '02176', '02180', '02184', '02185', '02186', '02187', '02188', '02189', '02190', '02191', '02196', '02199',
    '02201', '02203', '02204', '02205', '02206', '02210', '02211', '02212', '02215', '02217', '02222', '02238', '02241', '02266', '02269', '02283', '02284', '02293', '02297', '02298',
    '02301', '02302', '02303', '02304', '02305', '02322', '02324', '02325', '02327', '02330', '02331', '02332', '02333', '02334', '02337', '02338', '02339', '02341', '02343', '02344', '02345', '02346', '02347', '02348', '02349', '02350', '02351', '02355', '02356', '02357', '02358', '02359', '02360', '02361', '02362', '02364', '02366', '02367', '02368', '02370', '02375', '02379', '02381', '02382',
    '02420', '02421', '02445', '02446', '02447', '02451', '02452', '02453', '02454', '02455', '02456', '02457', '02458', '02459', '02460', '02461', '02462', '02464', '02465', '02466', '02467', '02468', '02471', '02472', '02474', '02475', '02476', '02477', '02478', '02479', '02481', '02482', '02492', '02493', '02494', '02495',
    '02532', '02534', '02536', '02537', '02538', '02540', '02541', '02542', '02543', '02553', '02556', '02558', '02559', '02561', '02562', '02563', '02571', '02574', '02576',
    '02601', '02630', '02631', '02632', '02633', '02634', '02635', '02637', '02638', '02639', '02641', '02642', '02643', '02644', '02645', '02646', '02647', '02648', '02649', '02650', '02651', '02652', '02653', '02655', '02657', '02659', '02660', '02661', '02662', '02663', '02664', '02666', '02667', '02668', '02669', '02670', '02671', '02672', '02673', '02675',
    '02702', '02703', '02712', '02714', '02715', '02717', '02718', '02719', '02720', '02721', '02722', '02723', '02724', '02725', '02726', '02738', '02739', '02740', '02741', '02742', '02743', '02744', '02745', '02746', '02747', '02748', '02760', '02761', '02762', '02763', '02764', '02766', '02767', '02768', '02769', '02770', '02771', '02777', '02779', '02780', '02790', '02791',
    '05501'
  ]

  // Función para validar zipcode
  const validateZipCode = (zipCode) => {
    const cleanZipCode = zipCode.trim()
    const isValid = authorizedZipCodes.includes(cleanZipCode)
    setIsZipCodeValid(isValid)
    if (!isValid && cleanZipCode.length >= 5) {
      setZipCodeError('Sorry, we don\'t currently service this area. Please check back later!')
    } else {
      setZipCodeError('')
    }
    return isValid
  }

  // Log para verificar cuántas instancias se montan
  useEffect(() => {
    console.log('🔧 Form component mounted - timestamp:', new Date().toISOString(), 'formId:', formId)
    return () => {
      console.log('🔧 Form component unmounted - timestamp:', new Date().toISOString(), 'formId:', formId)
    }
  }, [formId])

  useEffect(() => {
    if (!tfHiddenRef.current) return
    // Ya cargamos el script global en layout.tsx con field=trusted_form_cert_id
    const applyFromGlobal = () => {
      try {
        const val = (window.TrustedForm && window.TrustedForm.getCertUrl && window.TrustedForm.getCertUrl()) || ''
        if (val) {
          if (tfHiddenRef.current) tfHiddenRef.current.value = val
          setTfToken(val)
        }
      } catch {}
    }
    applyFromGlobal()
    const obs = new MutationObserver(() => {
      if (tfHiddenRef.current?.value) setTfToken(tfHiddenRef.current.value)
    })
    obs.observe(tfHiddenRef.current, { attributes: true, attributeFilter: ['value'] })
    const id = setInterval(applyFromGlobal, 300)
    return () => { obs.disconnect(); clearInterval(id) }
  }, [])

  async function waitForTrustedFormToken(maxWaitMs = 2000) {
    const start = Date.now()
    const poll = async () => {
      const hiddenVal = tfHiddenRef.current?.value || ''
      let fromApi = ''
      try { fromApi = (window.TrustedForm && window.TrustedForm.getCertUrl && window.TrustedForm.getCertUrl()) || '' } catch {}
      const val = hiddenVal || fromApi
      if (val) {
        if (!hiddenVal && tfHiddenRef.current) tfHiddenRef.current.value = val
        setTfToken(val)
        return val
      }
      if (Date.now() - start >= maxWaitMs) return ''
      await new Promise(r => setTimeout(r, 150))
      return poll()
    }
    return poll()
  }

  async function waitForJornayaToken(maxWaitMs = 2000) {
    const start = Date.now()
    const poll = async () => {
      const leadIdInput = document.getElementById('leadid_token')
      const val = leadIdInput?.value || ''
      if (val) {
        return val
      }
      if (Date.now() - start >= maxWaitMs) return ''
      await new Promise(r => setTimeout(r, 150))
      return poll()
    }
    return poll()
  }

  async function onSubmit(e) {
    e.preventDefault()
    
    // Prevenir envíos duplicados
    if (hasSubmitted.current || loading) {
      console.log('🚫 Form submission blocked - already submitted or submitting')
      return
    }
    
    // Validar zipcode antes de continuar
    const formEl = e.currentTarget
    const zipCodeValue = new FormData(formEl).get('zip_code')?.toString().trim() || ''
    
    if (!validateZipCode(zipCodeValue)) {
      console.log('🚫 Form submission blocked - invalid zipcode:', zipCodeValue)
      return
    }
    
    console.log('🚀 Form submission started - hasSubmitted:', hasSubmitted.current, 'loading:', loading, 'formId:', formId)
    hasSubmitted.current = true
    setLoading(true)
    // Espera breve para que TrustedForm y Jornaya completen los tokens
    await waitForTrustedFormToken(2000)
    await waitForJornayaToken(2000)
    const f = new FormData(formEl)

    const payload = {
      lp_campaign_id: process.env.NEXT_PUBLIC_LP_CAMPAIGN_ID || 'Provided',
      lp_campaign_key: process.env.NEXT_PUBLIC_LP_CAMPAIGN_KEY || 'Provided',
      lp_s1: process.env.NEXT_PUBLIC_LP_S1 || 'Provided',
      lp_s2: process.env.NEXT_PUBLIC_LP_S2 || 'Your tracking ID',
      lp_response: 'JSON',
      city: f.get('city')?.toString().trim() || '',
      state: f.get('state')?.toString().trim() || '',
      zip_code: f.get('zip_code')?.toString().trim() || '',
      first_name: f.get('first_name')?.toString().trim() || '',
      last_name: f.get('last_name')?.toString().trim() || '',
      address: f.get('address')?.toString().trim() || '',
      phone_home: f.get('phone_home')?.toString().trim() || '',
      email_address: f.get('email_address')?.toString().trim() || '',
      trusted_form_cert_id: (tfHiddenRef.current?.value || tfToken || f.get('trusted_form_cert_id')?.toString() || ''),
      jornaya_lead_id: f.get('universal_leadid')?.toString() || '',
      landing_page: window.location.href,
      repair_or_replace: f.get('repair_or_replace')?.toString() || '',
      tcpaText: document.getElementById('tcpa_text')?.innerText || '',
      consent_language: f.get('consent-language') === 'on',
    }

    try {
      const res = await fetch('/api/zapier', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload),
      })
      if (!res.ok) {
        const ct = res.headers.get('content-type') || ''
        let msg = 'Request failed'
        if (ct.includes('application/json')) {
          try { const j = await res.json(); msg = j?.error || JSON.stringify(j) } catch {}
        } else {
          try { msg = await res.text() } catch {}
        }
        throw new Error(msg)
      }
      
      console.log('Form submitted successfully')
      
      // Disparar Custom Event para GTM (solo una vez)
      if (typeof window !== 'undefined' && window.dataLayer) {
        const eventData = {
          event: 'lead_submit',
          form_id: formId,
          form_type: 'bathroom_remodeling',
          lead_data: {
            first_name: payload.first_name,
            last_name: payload.last_name,
            email: payload.email_address,
            phone: payload.phone_home,
            service: payload.repair_or_replace,
            zip_code: payload.zip_code,
            city: payload.city,
            state: payload.state
          }
        }
        
        window.dataLayer.push(eventData)
        console.log('✅ Custom GTM event pushed: lead_submit')
        console.log('📊 Event data:', eventData)
        console.log('📈 Total dataLayer events:', window.dataLayer.length)
      }
      
      formEl.reset()
      setTfToken('')
      router.push('/thank-you')
    } catch (err) {
      console.error(err)
      const msg = err instanceof Error ? err.message : 'Error sending form.'
      alert(`Error sending form: ${msg}`)
      // Reset hasSubmitted en caso de error para permitir reintento
      hasSubmitted.current = false
    } finally {
      setLoading(false)
    }
  }

  // Determinar si es el formulario desktop (más compacto)
  const isDesktopForm = formId === 'lead-form-desktop'
  
  return (
    <form ref={formRef} id={formId} onSubmit={onSubmit} data-tf-element-role="offer" className={`${isDesktopForm ? 'max-w-full h-full flex flex-col' : 'max-w-2xl mx-auto'} p-[1px] rounded-2xl bg-gradient-to-r from-primary-200 to-secondary-200`}>
      <div className={`bg-white/90 backdrop-blur rounded-2xl ${isDesktopForm ? 'p-3 flex-1 flex flex-col' : 'p-6 md:p-8'} shadow-xl`}>
      {!isDesktopForm && (
        <div className="text-center mb-6">
          <h3 className="text-2xl font-bold">Request Your Free Quote</h3>
          <p className="text-gray-600 text-sm">Fast response. No obligation.</p>
        </div>
      )}
      <div className={`${isDesktopForm ? 'space-y-1.5 flex-1' : 'space-y-3'}`}>
        <div className={`grid grid-cols-1 ${isDesktopForm ? 'gap-2' : 'sm:grid-cols-2 gap-4'}`}>
          <div>
            <label className={`block ${isDesktopForm ? 'text-xs' : 'text-sm'} font-medium`}>First name</label>
            <input name="first_name" required className={`mt-1 w-full rounded-lg border ${isDesktopForm ? 'p-1.5 text-xs' : 'p-2 text-sm'}`} />
          </div>
          <div>
            <label className={`block ${isDesktopForm ? 'text-xs' : 'text-sm'} font-medium`}>Last name</label>
            <input name="last_name" required className={`mt-1 w-full rounded-lg border ${isDesktopForm ? 'p-1.5 text-xs' : 'p-2 text-sm'}`} />
          </div>
        </div>

        <div>
          <label className={`block ${isDesktopForm ? 'text-xs' : 'text-sm'} font-medium`}>Address</label>
          <input name="address" required className={`mt-1 w-full rounded-lg border ${isDesktopForm ? 'p-1.5 text-xs' : 'p-2 text-sm'}`} />
        </div>
        
        <div className={`grid grid-cols-1 ${isDesktopForm ? 'gap-2' : 'sm:grid-cols-3 gap-4'}`}>
          <div>
            <label className={`block ${isDesktopForm ? 'text-xs' : 'text-sm'} font-medium`}>City</label>
            <input name="city" required className={`mt-1 w-full rounded-lg border ${isDesktopForm ? 'p-1.5 text-xs' : 'p-2 text-sm'}`} />
          </div>
          <div>
            <label className={`block ${isDesktopForm ? 'text-xs' : 'text-sm'} font-medium`}>State</label>
            <input name="state" required className={`mt-1 w-full rounded-lg border ${isDesktopForm ? 'p-1.5 text-xs' : 'p-2 text-sm'}`} placeholder="CA or California" />
          </div>
          <div>
            <label className={`block ${isDesktopForm ? 'text-xs' : 'text-sm'} font-medium`}>ZIP</label>
            <input 
              name="zip_code" 
              required 
              className={`mt-1 w-full rounded-lg border ${isDesktopForm ? 'p-1.5 text-xs' : 'p-2 text-sm'} ${!isZipCodeValid && zipCodeError ? 'border-red-500' : ''}`}
              onChange={(e) => validateZipCode(e.target.value)}
              maxLength="5"
            />
            {zipCodeError && (
              <p className="mt-1 text-red-500 text-xs">{zipCodeError}</p>
            )}
          </div>
        </div>

        <div className={`grid grid-cols-1 ${isDesktopForm ? 'gap-2' : 'sm:grid-cols-2 gap-4'}`}>
          <div>
            <label className={`block ${isDesktopForm ? 'text-xs' : 'text-sm'} font-medium`}>Email</label>
            <input type="email" name="email_address" required className={`mt-1 w-full rounded-lg border ${isDesktopForm ? 'p-1.5 text-xs' : 'p-2 text-sm'}`} />
          </div>
          <div>
            <label className={`block ${isDesktopForm ? 'text-xs' : 'text-sm'} font-medium`}>Phone</label>
            <input name="phone_home" required className={`mt-1 w-full rounded-lg border ${isDesktopForm ? 'p-1.5 text-xs' : 'p-2 text-sm'}`} />
          </div>
        </div>

        <div>
          <label className={`block ${isDesktopForm ? 'text-xs' : 'text-sm'} font-medium`}>Service of interest</label>
          <div className={`mt-2 flex ${isDesktopForm ? 'gap-4' : 'gap-6'}`}>
            <label className="inline-flex items-center gap-2">
              <input type="radio" name="repair_or_replace" value="repair" required />
              <span className={isDesktopForm ? 'text-xs' : 'text-sm'}>Repair</span>
            </label>
            <label className="inline-flex items-center gap-2">
              <input type="radio" name="repair_or_replace" value="replace" />
              <span className={isDesktopForm ? 'text-xs' : 'text-sm'}>Replace</span>
            </label>
          </div>
        </div>
      </div>

      <input ref={tfHiddenRef} type="hidden" name="trusted_form_cert_id" />
      <input id="leadid_token" type="hidden" name="universal_leadid" value="" />

      <label data-tf-element-role="consent-language" className={`rounded-lg border ${isDesktopForm ? 'p-1.5' : 'p-2'} bg-gray-50 block`}>
        <p id="tcpa_text" className={`${isDesktopForm ? 'text-[10px]' : 'text-[11px]'} leading-tight`}>
          By clicking Submit, You agree to give express consent to receive marketing communications regarding Home Improvement services by automatic dialing system and pre-recorded calls and artificial voice messages from <a className="underline" href="/partners" target="_blank" rel="noreferrer">Home Services Partners</a> at the phone number and E-mail address provided by you, including wireless numbers, if applicable, even if you have previously registered the provided number on the Do not Call Registry. SMS/MMS and data messaging rates may apply. You understand that my consent here is not a condition for buying any goods or services. You agree to the 
          <a className="underline" href="/privacy-policy" target="_blank" rel="noreferrer">Privacy Policy</a> and 
          <a className="underline ml-1" href="/terms-conditions" target="_blank" rel="noreferrer">Terms & Conditions</a>.
        </p>
        <div className={`${isDesktopForm ? 'mt-1' : 'mt-1.5'}`}>
          <span className={isDesktopForm ? 'text-[10px]' : 'text-[11px]'}>I agree to be contacted.</span>
          <input type="hidden" name="consent-language" value="on" />
        </div>
      </label>

      <input type="submit" name="submit" data-tf-element-role="submit" disabled={loading || !isZipCodeValid} value={loading ? 'Sending…' : 'Submit'} className={`w-full rounded-2xl bg-gradient-to-r from-primary-600 to-secondary-600 text-white ${isDesktopForm ? 'py-2' : 'py-3'} font-semibold shadow-lg hover:shadow-xl transition disabled:opacity-60 ${isDesktopForm ? 'text-sm' : ''} cursor-pointer`} />
      </div>
    </form>
  )
}


